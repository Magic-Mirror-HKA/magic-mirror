/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 .\scene.gltf 
Author: Pebegou (https://sketchfab.com/Pebegou)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/tiger-head-5b98e6b4e98e4a2bb27bed44887de723
Title: Tiger head
*/

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useFaceLandmarkDetector } from "@/hooks/FaceLandmarkDetector";
import { useFrame } from "@react-three/fiber";
import { decomposeMatrix } from "@/context/ApplicationContext";
import * as THREE from "three";

export const TigerHead = (props) => {
  const { nodes, materials } = useGLTF("/gltf_models/tiger-head/scene.gltf");

  const groupRef1 = useRef();
  const groupRef2 = useRef();
  const groupRef3 = useRef();

  const { detectLandmarks, drawLandmarks, results } = useFaceLandmarkDetector();

  useFrame(() => {
    detectLandmarks(props.webcamInstance, Date.now());
    if (groupRef1.current && results) {
      // console.log(refSkullHead.current);
      updateTranslation(results, true);
    }
  });

  const updateTranslation = (results, flipped = true) => {
    if (!results.facialTransformationMatrixes) return;

    const matrixes = results.facialTransformationMatrixes[0]?.data;
    if (!matrixes) return;

    const { translation, rotation, scale } = decomposeMatrix(matrixes);
    const euler = new THREE.Euler(
      rotation.x,
      rotation.y,
      rotation.z,
      //"ZYX",
      "ZYX",
    );
    const quaternion = new THREE.Quaternion().setFromEuler(euler);
    if (flipped) {
      // flip to x axis
      quaternion.y *= -1;
      quaternion.z *= -1;
      translation.x *= -1;
    }

    groupRef1.current.position.set(
      (translation.x - 2) * 0.05,
      (translation.y + 0.5) * -0.2,
      (translation.z + 20) * 0.03,
    );
    groupRef1.current.scale.set(0.2, 0.2, 0.2);

    groupRef2.current.position.set(
      (translation.x - 2) * 0.05,
      (translation.y + 0.5) * -0.2,
      (translation.z + 20) * 0.03,
    );
    groupRef2.current.scale.set(0.2, 0.2, 0.2);

    groupRef3.current.position.set(
      (translation.x - 2) * 0.05,
      (translation.y + 0.5) * -0.2,
      (translation.z + 20) * 0.03,
    );
    groupRef3.current.scale.set(0.2, 0.2, 0.2);
  };

  return (
    <group
      ref={groupRef1}
      {...props}
      dispose={null}
      scale={0.2}
      position={[0, 1, -20]}
    >
      <group
        ref={groupRef2}
        //position={[0.228, 101.716, -15.035]}
        scale={0.2}
        position={[0, 0, 0]}
        rotation={[Math.PI / 1.75, -0.004, Math.PI]}
        //scale={0.004}
      >
        <group rotation={[-Math.PI, 0, 0]} ref={groupRef3}>
          <group
            position={[0, 127.432, 103.481]}
            rotation={[0, 0, -Math.PI]}
            scale={100}
          >
            <mesh
              geometry={nodes.Eyes_Cornea_0.geometry}
              material={materials.Cornea}
            />
            <mesh
              geometry={nodes.Eyes_Material1_0.geometry}
              material={materials.Material1}
            />
          </group>
          <group rotation={[0, 0, -Math.PI]} scale={100}>
            <mesh
              geometry={nodes.TigerFur_Fur_0.geometry}
              material={materials.material}
            />
            <mesh
              geometry={nodes.TigerFur_Fur2_0.geometry}
              material={materials.Fur2}
            />
          </group>
          <mesh
            geometry={nodes.TigerLow_Material1_0.geometry}
            material={materials.Material1}
            rotation={[0, 0, -Math.PI]}
            scale={100}
          />
          <mesh
            geometry={nodes.Teeth_Material1_0.geometry}
            material={materials.Material1}
            rotation={[-0.499, 0, Math.PI]}
            scale={194.084}
          />
        </group>
      </group>
    </group>
  );
};

useGLTF.preload("/gltf_models/tiger-head/scene.gltf");
